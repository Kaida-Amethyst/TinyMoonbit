
typealias @parser.(Var, TypeName)

pub(all) enum KnfExpr {
  Bool(Bool)
  Int(Int)
  Int64(Int64)
  UInt(UInt)
  UInt64(UInt64)
  Float(Float)
  Double(Double)
  Var(Var)
  Add(Var, Var)
  Sub(Var, Var)
  Mul(Var, Var)
  Div(Var, Var)
  Rem(Var, Var)
  Eq(Var, Var)
  Ne(Var, Var)
  Lt(Var, Var)
  Le(Var, Var)
  Gt(Var, Var)
  Ge(Var, Var)
  And(Var, Var)
  Or(Var, Var)
  Shl(Var, Var)
  Shr(Var, Var)
  FAdd(Var, Var)
  FSub(Var, Var)
  FMul(Var, Var)
  FDiv(Var, Var)
  FRem(Var, Var)
  FEq(Var, Var)
  FNe(Var, Var)
  FLt(Var, Var)
  FLe(Var, Var)
  FGt(Var, Var)
  FGe(Var, Var)
}

pub(all) enum KnfStmt {
  Let(Var, TypeName, KnfExpr)
  Assign(Var, Var?, KnfExpr)
  ArrayPut(Var, Var, KnfExpr)
  If(KnfExpr, Array[KnfStmt], Array[KnfStmt])
  While(KnfExpr, Array[KnfStmt])
  Return(KnfExpr?)
}
